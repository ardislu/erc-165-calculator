{
  "ERC-20": [
    "totalSupply()",
    "balanceOf(address _owner)",
    "transfer(address _to, uint256 _value)",
    "transferFrom(address _from, address _to, uint256 _value)",
    "approve(address _spender, uint256 _value)",
    "allowance(address _owner, address _spender)"
  ],
  "ERC-20 (including optional)": [
    "name()",
    "symbol()",
    "decimals()",
    "totalSupply()",
    "balanceOf(address _owner)",
    "transfer(address _to, uint256 _value)",
    "transferFrom(address _from, address _to, uint256 _value)",
    "approve(address _spender, uint256 _value)",
    "allowance(address _owner, address _spender)"
  ],
  "ERC-165": [
    "supportsInterface(bytes4 interfaceID)"
  ],
  "ERC-721": [
    "balanceOf(address _owner)",
    "ownerOf(uint256 _tokenId)",
    "safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data)",
    "safeTransferFrom(address _from, address _to, uint256 _tokenId)",
    "transferFrom(address _from, address _to, uint256 _tokenId)",
    "approve(address _approved, uint256 _tokenId)",
    "setApprovalForAll(address _operator, bool _approved)",
    "getApproved(uint256 _tokenId)",
    "isApprovedForAll(address _owner, address _operator)"
  ],
  "ERC-721 Metadata": [
    "name()",
    "symbol()",
    "tokenURI(uint256 _tokenId)"
  ],
  "ERC-721 Token Receiver": [
    "onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data)"
  ],
  "ERC-721 Enumerable": [
    "totalSupply()",
    "tokenByIndex(uint256 _index)",
    "tokenOfOwnerByIndex(address _owner, uint256 _index)"
  ],
  "ERC-1155": [
    "safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data)",
    "safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data)",
    "balanceOf(address _owner, uint256 _id)",
    "balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids)",
    "setApprovalForAll(address _operator, bool _approved)",
    "isApprovedForAll(address _owner, address _operator)"
  ],
  "ERC-1155 Metadata": [
    "uri(uint256 _id)"
  ],
  "ERC-1155 Token Receiver": [
    "onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes calldata _data)",
    "onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data)"
  ],
  "ERC-1271": [
    "isValidSignature(bytes32 _hash, bytes calldata _signature)"
  ],
  "ERC-1363": [
    "transferAndCall(address to, uint256 value)",
    "transferAndCall(address to, uint256 value, bytes memory data)",
    "transferFromAndCall(address from, address to, uint256 value)",
    "transferFromAndCall(address from, address to, uint256 value, bytes memory data)",
    "approveAndCall(address spender, uint256 value)",
    "approveAndCall(address spender, uint256 value, bytes memory data)"
  ],
  "ERC-1363 Receiver": [
    "onTransferReceived(address operator, address from, uint256 value, bytes memory data)"
  ],
  "ERC-1363 Spender": [
    "onApprovalReceived(address owner, uint256 value, bytes memory data)"
  ],
  "ERC-4906": "0x49064906",
  "ERC-5805": [
    "getVotes(address account)",
    "getPastVotes(address account, uint256 timepoint)",
    "delegates(address account)",
    "nonces(address owner)",
    "delegate(address delegatee)",
    "delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s)"
  ],
  "ERC-6551 Account": [
    "token()",
    "state()",
    "isValidSigner(address signer, bytes calldata context)"
  ],
  "ERC-6551 Executor": [
    "execute(address to, uint256 value, bytes calldata data, uint8 operation)"
  ],
  "OpenZeppelin (v5.0.0) AccessControl": [
    "hasRole(bytes32 role, address account) external view returns (bool)",
    "getRoleAdmin(bytes32 role) external view returns (bytes32)",
    "grantRole(bytes32 role, address account) external",
    "revokeRole(bytes32 role, address account) external",
    "renounceRole(bytes32 role, address callerConfirmation) external"
  ],
  "ENSIP-10 ExtendedResolver": [
    "resolve(bytes calldata name, bytes calldata data) external view returns (bytes)"
  ]
}